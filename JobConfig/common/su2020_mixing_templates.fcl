# -*- mode:tcl -*-
#------------------------------------------------------------------------------
# common parts used in all mixing jobs
# the following is what JobConfig/primary/prolog.fcl" is 
# Prolog specific to creating primary (signal, signal-like or calibration) particles
#------------------------------------------------------------------------------
#================================================================
mu2e.physics.producers.g4run.commonBase: { module_type: Mu2eG4
    physics             : @local::mu2eg4DefaultPhysics
    ResourceLimits      : @local::mu2eg4DefaultResourceLimits
    TrajectoryControl   : @local::mu2eg4NoTrajectories               # different from mu2eg4runDefaultSingleStage
    debug               : @local::mu2eg4DefaultDebug
    visualization       : @local::mu2eg4NoVisualization

    Mu2eG4StackingOnlyCut : @local::mu2eg4CutNeutrinos
    Mu2eG4SteppingOnlyCut : {}
    Mu2eG4CommonCut       : {}

    generatorModuleLabel : @nil

    SDConfig : {
	enableSD         : [ tracker, calorimeter, calorimeterRO, CRV, virtualdetector, protonabsorber ]
	TimeVD           : { times: [] }
	preSimulatedHits : @nil
    }   
}
#------------------------------------------------------------------------------
# configuration for the beam flash
#------------------------------------------------------------------------------
mu2e.physics.producers.g4run.flash                      : @local::mu2e.physics.producers.g4run.commonBase
mu2e.physics.producers.g4run.flash.generatorModuleLabel : ""
mu2e.physics.producers.g4run.flash.MultiStageParameters : {
    simParticleNumberOffset  : 300000
    genInputHits             : [ "mothersFilter:DetectorMother" ]
    inputSimParticles        : "mothersFilter"
    inputMCTrajectories      : ""
    inputPhysVolumeMultiInfo : "compressPVMothers"
}

mu2e.physics.producers.g4run.flash.SDConfig.preSimulatedHits:  ["mothersFilter:virtualdetector"]

#----------------------------------------------------------------
mu2e.physics.producers.g4run.muons                          : { @table::mu2e.physics.producers.g4run.commonBase }
mu2e.physics.producers.g4run.muons.generatorModuleLabel     : "generate"
mu2e.physics.producers.g4run.muons.SDConfig.preSimulatedHits: []

#================================================================
mu2e.outputs.g4s4Defs: {
    detectorOutput: {
	module_type: RootOutput
	SelectEvents: [detPath]
	outputCommands:   [ "drop *_*_*_*",
			    "keep mu2e::GenParticles_*_*_*",
			    "keep mu2e::GenEventCount_*_*_*",
			    "keep mu2e::StatusG4_*_*_*",
			    "keep *_detectorFilter_*_*",
			    "keep *_CaloShowerCrystalSteps_*_*",
			    "keep *_CaloShowerROSteps_*_*",
			    "keep *_compressPVDetector_*_*"
			   ]
	fileName: @nil
    }

    crvOutput: {
	module_type: RootOutput
	SelectEvents: [crvPath]
	outputCommands:   [ "drop *_*_*_*",
			    "keep mu2e::GenParticles_*_*_*",
			    "keep mu2e::GenEventCount_*_*_*",
			    "keep mu2e::StatusG4_*_*_*",
			    "keep *_crvFilter_*_*",
			    "keep *_compressPVCRV_*_*"
			   ]
	fileName: @nil
    }

    truncatedEvtsOutput: {
	module_type: RootOutput
	SelectEvents: [g4StatusPath]
	outputCommands:   [ "drop *_*_*_*",
			    "keep mu2e::GenParticles_*_*_*",
			    "keep mu2e::GenEventCount_*_*_*",
			    "keep mu2e::StatusG4_*_*_*",
			    "keep *_g4run_*_*",
			    "drop uintmu2e::PhysicalVolumeInfomvstd::pairs_*_*_*",
			    "keep *_compressPVFull_*_*"
			   ]
	fileName: @nil
    }
}

#================================================================
mu2e.physics.g4s4CommonBase: {
    producers: {
	g4run: @nil
	
	CaloShowerStepFromStepPt: @local::CaloShowerStepFromStepPt

	CaloShowerCrystalSteps: {
	    module_type: CaloShowerUpdater
	    showerInput: "CaloShowerStepFromStepPt:calorimeter"
	    newSimParticles: "detectorFilter"
	}

	CaloShowerROSteps: {
	    module_type: CaloShowerUpdater
	    showerInput: "CaloShowerStepFromStepPt:calorimeterRO"
	    newSimParticles: "detectorFilter"
	}

	compressPVDetector: {
	    module_type: CompressPhysicalVolumes
	    volumesInput: "g4run"
	    hitInputs: []
	    particleInputs: [ "detectorFilter" ]
	}
	compressPVCRV: {
	    module_type: CompressPhysicalVolumes
	    volumesInput: "g4run"
	    hitInputs: []
	    particleInputs: [ "crvFilter" ]
	}
	compressPVFull: {
	    module_type: CompressPhysicalVolumes
	    volumesInput: "g4run"
	    hitInputs: []
	    particleInputs: [ "g4run" ]
	}
    }
    
    filters: {
	g4status: { @table::g4status } # defined in Filters/fcl/prolog.fcl

	detectorFilter: {
	    module_type     : FilterG4Out
	    mainHitInputs   : [ "g4run:tracker" ]
	    mainSPPtrInputs : [ "CaloShowerStepFromStepPt" ]
	    extraHitInputs  : [ "g4run:virtualdetector", "g4run:protonabsorber" ]
	    vetoDaughters   : []
	}
	
	crvFilter: {
	    module_type: FilterG4Out
	    mainHitInputs: [ "g4run:CRV"]
	    extraHitInputs: [ "g4run:virtualdetector" ]
	    vetoDaughters: []
	}

	TrkStepFilter : {
	    module_type : MinimumHits
	    mode : "trackerOnly"
	    MinNStraws : 10
	    MinPartMom : 40.0  # MeV/c
	    PDGCodes : [11,-11, 13, -13] 
	    generatorModuleLabel : "generate"
	    g4ModuleLabel : "g4run"
	}

	g4consistent: {
	    module_type: FilterStatusG4
	    input: "g4run"
	    maxAcceptedStatus: 9  #  status 10 and above means StepPointMCCollection may have non-dereferencable pointers
	}
    }
    
    analyzers: { genCountLogger: { module_type: GenEventCountReader } }
    
    crvPath      : @nil
    detPath      : @nil
    g4StatusPath : @nil
    trigger_paths: [ detPath, crvPath, g4StatusPath ]
    
    out          : [ detectorOutput, crvOutput, truncatedEvtsOutput ]
    gcl          : [ genCountLogger ]
    end_paths    : [ out, gcl ]
}

# crvPathCommon     : [ g4run, g4consistent, crvFilter, compressPVCRV ]

# detPathCommon     : [ g4run, g4consistent, CaloShowerStepFromStepPt, 
# 		      detectorFilter, CaloShowerCrystalSteps, CaloShowerROSteps, 
#		      compressPVDetector 
#		     ]
# g4StatusPathCommon:  [ g4run, "!g4status", compressPVFull ]
#----------------------------------------------------------------
# mu2e.physics.g4s4Flash                 : { @table::mu2e.physics.g4s4CommonBase        }
# mu2e.physics.g4s4Flash.producers.g4run : } @table::mu2e.physics.producers.g4run.flash }
# mu2e.physics.g4s4Flash.crvPath         : [ @sequence::crvPathCommon ]
# mu2e.physics.g4s4Flash.detPath         : [ @sequence::detPathCommon ]
# mu2e.physics.g4s4Flash.g4StatusPath    : [ @sequence::g4StatusPathCommon ]

#----------------------------------------------------------------
# mu2e.physics.g4s4Muons                : @local::mu2e.physics.g4s4CommonBase
# mu2e.physics.g4s4Muons.producers.g4run: @local::mu2e.physics.producers.g4run.muons

# mu2e.physics.g4s4Muons.producers.genCounter: { module_type: GenEventCounter }

# mu2e.physics.g4s4Muons.crvPath:       [ generate, genCounter,  @sequence::crvPathCommon ]
# mu2e.physics.g4s4Muons.g4StatusPath:  [ generate, genCounter, @sequence::g4StatusPathCommon ]

# mu2e.physics.g4s4Muons.detPath:       [ generate, genCounter,  @sequence::detPathCommon ]

Primary: {
#    producers : {
#	genCounter : { module_type: GenEventCounter }

# 	@table::EventGenerator.producers
#	@table::CommonMC.producers
#	@table::TrackerMC.producers
#	@table::CaloDigiMC.producers
#	@table::CrvDAQPackage.producers

	# dedicated digi maker for filter, 2 stages now

#	makeSGS         : { module_type : MakeStrawGasSteps    # this is the default configuration
#	    KeepDeltasModule : "g4run"                         # don'e compress deltas on primary particles
#	}
#	makeSD          : { @table::makeSD }
#	compressDigiMCs : { @table::DigiCompression.Primary }
#    }

    filters : {
	g4status: { @table::g4status } 

	# digi filtering for Primary selection.
	StrawDigiMCFilter : { @table::StrawDigiMCFilter }              # Filters/fcl/prolog.fcl

	# shower filter for calorimeter selection
	CaloFilter : { module_type : CaloShowerSimFilter }
    }

    analyzers: {
	genCountLogger       : { module_type: GenEventCountReader makeHistograms: false }
	digiCompressionCheck : { @table::DigiCompression.Check }
    }

    Output   : {
	module_type    : RootOutput
	SelectEvents   : [ @sequence::TRIGGER_PATHS ]
	fileName       : @nil
	# drop StepPoints from calorimeter
	outputCommands : @local::DigiCompression.OutputCommands
    }

    EndPath  : [ genCountLogger, digiCompressionCheck, Output ]
}

Primary.GenAndG4    : [ generate, genCounter, g4run, g4status ]

# must define this outside the brackets due to internal dependence
Primary.TriggerPath : [ @sequence::Primary.GenAndG4,
			@sequence::CommonMC.DigiSim,
			@sequence::TrackerMC.DigiSim,
			StrawDigiMCFilter,
			@sequence::CaloDigiMC.DigiSim,
			@sequence::CrvDAQPackage.CrvResponseSequence,
			compressDigiMCs ]


MIXER_READ_MODE        : sequential   # randomReplace / sequential
MIXER_MU2E_SKIP_FACTOR : 1.           # Andy says "temporary"
#----------------------------------------------------------------
mixerTemplateCommon: {
    module_type         : MixBackgroundFrames
    fileNames           : @nil
    #     sequential       -- read the secondary events in order
    #     randomReplace    -- random with replacement
    #     randomLimReplace -- events unique within a primary event
    #     randomNoReplace  -- events guaranteed to be used once only.
    readMode            : @local::MIXER_READ_MODE
    wrapFiles           : true

    mu2e: {
	label                   : @nil
	protonBunchIntensityTag : "protonBunchIntensity"
	meanEventsPerProton     : @nil
	products                : @nil
	skipFactor              : @local::MIXER_MU2E_SKIP_FACTOR  
	debugLevel              : 0
    }
}

#----------------------------------------------------------------
mixerTemplateTrkCal : { @table::mixerTemplateCommon }

mixerTemplateTrkCal.mu2e.products : {
    genParticleMixer   : { mixingMap: [ [ "generate"             , ""  ] ] }
    simParticleMixer   : { mixingMap: [ [ "g4run"                , ""  ] ] }
    stepPointMCMixer   : { mixingMap: [ [ "g4run:tracker"        , ":" ] ,
					[ "g4run:virtualdetector", ":" ] ,
					[ "g4run:protonabsorber" , ":" ] ] }

    caloShowerStepMixer: { mixingMap: [ [ "CaloShowerStepFromStepPt:calorimeter"  , "calorimeter"   ],
					[ "CaloShowerStepFromStepPt:calorimeterRO", "calorimeterRO" ]
				       ]
    }
}
#----------------------------------------------------------------
mixerTemplateCRV: @local::mixerTemplateCommon

mixerTemplateCRV.mu2e.products: {
   genParticleMixer: { mixingMap: [ [ "generate"     , ""  ] ] }
   simParticleMixer: { mixingMap: [ [ "crvFilter"    , ""  ] ] }
   stepPointMCMixer: { mixingMap: [ [ "crvFilter:CRV", ":" ] ] }
}

# flash cut configuration
CRVCut : { module_type : CompressStepPointMCs
    stepPointMCTags    : [ "crvFilter:CRV" ]
    caloShowerStepTags : [ ]
    simParticleTag     : "crvFilter"
    minTime            : 350
    maxTime            : 1695
    minEdep            : 10.0e-6
    maxEdep            : 1.0e6
    timeMapTags        : [ "protonTimeMap" ]
    diagLevel          : 0
}
#------------------------------------------------------------------------------
# mixing configuration
#------------------------------------------------------------------------------
Mixing : {
    # input time maps from cut mix inputs.  All are needed
    protonTimeMaps : [ "flashMixerTrkCal:protonTimeMap" ] # [, "PSMixerCRV:protonTimeMap", "DSMixerCRV:protonTimeMap"]

    # cosmic time maps from primary generation
    cosmicTimeMaps : ["cosmicTimeMapPrimary"]

    # calo tags.  flashMixer is different because they are filtered
    # NB: caloMixerTags <-> TrkCalMixSequence : thre should be one-to-one correspondence, as 
    # CaloShowerStepROFromShowerStep and compressDigiMCs use them
    # in essense, for each tag in 'caloMixerTags', there should be a running mixer

    caloMixerTags : [ 
		     "ootMixerTrkCal:calorimeter"     , 
		     "protonMixerTrkCal:calorimeter"  , 
		     "deuteronMixerTrkCal:calorimeter", 
		     "dioMixerTrkCal:calorimeter"     , 
		     "photonMixerTrkCal:calorimeter"  ,
		     "neutronMixerTrkCal:calorimeter" , 
		     "flashMixerTrkCal:calorimeter" 
		    ]

    TrkCalMixSequence     : [ flashMixerTrkCal  , 
			      ootMixerTrkCal    , 
			      neutronMixerTrkCal, 
			      dioMixerTrkCal    , 
			      photonMixerTrkCal , 
			      protonMixerTrkCal , 
			      deuteronMixerTrkCal 
			     ]

    # sequences

    CRVMixSequence        : [ PSMixerCRV, TSMixerCRV, DSMixerCRV,
			      ootMixerCRV, neutronMixerCRV, dioMixerCRV, photonMixerCRV 
			     ]
}

Mixing : { @table::Mixing
    producers : {
	g4run      : { @table::mu2e.physics.producers.g4run.muons }
#	@table::Primary.producers
#------------------------------------------------------------------------------
# proton bunch intensity - realistic one
# assume SDF = 0.6 -> sigma = 
# 1-batch mode: I0 = 1.e7   
# 2-batch mode: I0 = 3.9e7   
#------------------------------------------------------------------------------
	protonBunchIntensity: { module_type: ProtonBunchIntensityLogNormal
	    #               SU2020    #  MDC2018  
	    extendedMean :  1.6e7     #  3.9e7     # mean of the uncut distribution
	    sigma        :  0.7147    #  0.3814
	    cutMax       : 12.0e7     # 11.7e7     # cut the tail far enough
	}
	                                                # tracker digis for primary selection
	# digi compression - this seems to inpude primary
	compressDigiMCs  : { @table::DigiCompression.Mixing
	    simParticleTags    : [ "g4run", @sequence::Mixing.TrkCalMixSequence ] # , @sequence::Mixing.CRVMixSequence ]
	    caloShowerStepTags : [ "CaloShowerStepFromStepPt:calorimeter" , @sequence::Mixing.caloMixerTags     ]
	}

	CaloShowerStepFromStepPtPrimary: { @table::CaloShowerStepFromStepPt }

	CaloShowerStepROFromShowerStepPrimary: { @table::CaloShowerStepROFromShowerStep
	    caloCrystalShowerInputs : [ "CaloShowerStepFromStepPtPrimary:calorimeter" ]
	    TimeOffsets             : {
		inputs : [ @sequence::CommonMC.TimeMapsPrimary ]
	    }
	}

	# CaloDigiFromShowerPrimary: { @table::CaloDigiFromShower
	#     caloShowerModuleLabel : CaloShowerStepROFromShowerStepPrimary
	# }

    }

    filters : {
	@table::Primary.filters
	
	# TrkCal mixing
	flashMixerTrkCal    : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:flashMixerTrkCal   }}
	ootMixerTrkCal      : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:ootMixerTrkCal     }} 
	neutronMixerTrkCal  : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:neutronMixerTrkCal }}
	dioMixerTrkCal      : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:dioMixerTrkCal     }}
	photonMixerTrkCal   : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:photonMixerTrkCal  }}
	protonMixerTrkCal   : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:protonMixerTrkCal  }}
	deuteronMixerTrkCal : { @table::mixerTemplateTrkCal mu2e: { @table::mixerTemplateTrkCal.mu2e label:deuteronMixerTrkCal}}

	# CRV mixing
	PSMixerCRV	    : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:PSMixerCRV      }}
	TSMixerCRV	    : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:TSMixerCRV      }}
	DSMixerCRV	    : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:DSMixerCRV      }}
	ootMixerCRV	    : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:ootMixerCRV     }}
	neutronMixerCRV     : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:neutronMixerCRV }}
	dioMixerCRV	    : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:dioMixerCRV     }}
	photonMixerCRV      : { @table::mixerTemplateCRV    mu2e: { @table::mixerTemplateCRV.mu2e    label:photonMixerCRV  }}

	# digi filtering for Primary selection.
	StrawDigiMCFilter   : { @table::StrawDigiMCFilter 
	    StrawDigiMCCollection : "makeSDPrimary"
	}

	CaloShowerSimFilter : { module_type :CaloShowerSimFilter
	    particleTypes     : [ 22, 11, -11, 13, -13, 2212, -2212  ] # save photons, electrons, muons, and protons
	    MinParticleEnergy       : 40.0 # MeV
	    MinTotalEnergy          : 100000.0 # disable, is an OR with MinParticleEnergy
	    CaloShowerSimCollection : "CaloShowerStepROFromShowerStepPrimary"
	    # debugLevel              : 1
	}
    }

    analyzers : { @table::Primary.analyzers }

    # paths and output
    EndPath : [ @sequence::Primary.EndPath ] 

    Output  : { module_type : RootOutput
	SelectEvents   : [ @sequence::TRIGGER_PATHS ]
	fileName       : @nil
	outputCommands : @local::DigiCompression.OutputCommands
    }

    # drops for reading primaries as input to mixing.  TrkDigis are kept to allow filtering
    Input : {
	droppedProducts : ["drop mu2e::CaloDigis_*_*_*",
			   "drop mu2e::CrvDigis_*_*_*",
			   "drop mu2e::CrvDigiMCs_*_*_*",
			   "drop mu2e::CaloShowerSims_*_*_*",
			   "drop art::TriggerResults_*_*_*" ]
    }
}

#------------------------------------------------------------------------------
Mixing.CreatePrimarySequence : [ @sequence::Primary.GenAndG4        ,
				 EWMProducer                        ,        # @sequence::CommonMC.PrimaryDigiSim
				 @sequence::CommonMC.TimeMapsPrimary,        # 
				 makeSGSPrimary, makeSDPrimary      , 
				 StrawDigiMCFilter                           # for sig+mbs, filter on makeSDPrimary
				]
Mixing.CreatePrimarySequence_calo : [ @sequence::Primary.GenAndG4,
				      @sequence::CommonMC.PrimaryDigiSim,
				      makeSGSPrimary, makeSDPrimary, 
				      CaloShowerStepFromStepPtPrimary, CaloShowerStepROFromShowerStepPrimary,
				      CaloShowerSimFilter
				     ]

Mixing.pbi_mix             : [ protonBunchIntensity               , 
			       EWMProducer                        , 
			       @sequence::Mixing.TrkCalMixSequence 
			      ]

Mixing.pbi_mix_digi_nocrv  : [ protonBunchIntensity               ,
			       EWMProducer                        , 
			       @sequence::Mixing.TrkCalMixSequence,
			       @sequence::CommonMC.DigiSim        ,
			       @sequence::TrackerMC.DigiSim       ,
			       @sequence::CaloDigiMC.DigiSim
			      ]			

Mixing.pbi_digi_nocrv      : [ protonBunchIntensity               ,
			       EWMProducer                        , 
			       # @sequence::CommonMC.DigiSim        ,  # [ @sequence::CommonMC.TimeMaps, EWMProducer ]
			       @sequence::CommonMC.TimeMaps       ,
			       @sequence::TrackerMC.DigiSim       ,
			       @sequence::CaloDigiMC.DigiSim
			      ]			

Mixing.pbi_mix_digi_all    : [ protonBunchIntensity               ,
			       EWMProducer                        , 
			       @sequence::Mixing.TrkCalMixSequence,
			       @sequence::Mixing.CRVMixSequence,
			       @sequence::CommonMC.DigiSim,
			       @sequence::TrackerMC.DigiSim,
			       @sequence::CaloDigiMC.DigiSim,
			       @sequence::CrvDAQPackage.CrvResponseSequence 
			      ]			
#------------------------------------------------------------------------------
# mixing_001: generate signal particle, add background mixing with CRV, compress
# mixing_002: generate signal particle, add background mixing , no CRV, compress
# mixing_003: just mix backgrounds, compress
#------------------------------------------------------------------------------
Mixing.signal_minbias       : [ @sequence::Mixing.CreatePrimarySequence,
				@sequence::Mixing.pbi_mix_digi_all     ,
				compressDigiMCs 
			       ]

Mixing.signal_nocrv         : [ # -- @sequence::Mixing.CreatePrimarySequence,
			        @sequence::Primary.GenAndG4        ,
				EWMProducer                        ,        # @sequence::CommonMC.PrimaryDigiSim
				@sequence::CommonMC.TimeMapsPrimary,        # 
				makeSGSPrimary, makeSDPrimary      ,        # this is @sequence::TrackerMC.DigiSimPrimary
				StrawDigiMCFilter                  ,        # for sig+mbs, filter on makeSDPrimary
			        # -- 
				# --- @sequence::Mixing.pbi_digi_nocrv       ,
				protonBunchIntensity               ,
				# -- @sequence::CommonMC.DigiSim        ,   # [ @sequence::CommonMC.TimeMaps, EWMProducer ]
				EWMProducer                        , 
				@sequence::CommonMC.TimeMaps       ,
				# --
				makeSGS, makeSD ,                           # this is @sequence::TrackerMC.DigiSim       ,
				@sequence::CaloDigiMC.DigiSim      ,
				# ---
				compressDigiMCs
			       ]

Mixing.signal_minbias_nocrv : [ @sequence::Mixing.CreatePrimarySequence,
				@sequence::Mixing.pbi_mix_digi_nocrv  ,
				compressDigiMCs 
			       ]
Mixing.signal_minbias_nocrv_calo : [ @sequence::Mixing.CreatePrimarySequence_calo,
				     @sequence::Mixing.pbi_mix_digi_nocrv  ,
				     compressDigiMCs 
				    ]

Mixing.minbias_nocrv        : [ @sequence::Mixing.pbi_mix_digi_nocrv  ,
				compressDigiMCs 
			       ]
#------------------------------------------------------------------------------------------------------
# TrkCal mixing fractions : N(mix-in events)/POT for different processes
# - physics.filters.flashMixerTrkCal.mu2e.meanEventsPerProton : 9.777e-4 # for uncut flash
# - for QGSP_BERT T>200 ns, scale flash multiplicity by 1.3   : 3.918e-5*1.3 = 5.093e-5
# - see mu2e-35969
#-----------------------------------------------------------+-------------+------------+--------------+
#                                                           |    SU2020   |  MDC2018   | debug        |
#-----------------------------------------------------------+-------------+------------+--------------+
Mixing.filters.flashMixerTrkCal.mu2e.meanEventsPerProton    :   5.093e-5  # 1.482e-5   # -155 # -2 # -1 
Mixing.filters.ootMixerTrkCal.mu2e.meanEventsPerProton      :   1.789e-5  # 2.4185E-05 # -687 # -3 # -1 
Mixing.filters.neutronMixerTrkCal.mu2e.meanEventsPerProton  :   1.699e-5  # 1.8790E-05 # -678 # -4 # -1 
Mixing.filters.dioMixerTrkCal.mu2e.meanEventsPerProton      :   4.178e-6  # 3.8434E-06 # -155 # -5 # -1 
Mixing.filters.photonMixerTrkCal.mu2e.meanEventsPerProton   :   8.231e-6  # 8.6966E-06 # -289 # -6 # -1 
Mixing.filters.protonMixerTrkCal.mu2e.meanEventsPerProton   :   6.594e-7  # 7.4322E-07 #  -24 # -7 # -1 
Mixing.filters.deuteronMixerTrkCal.mu2e.meanEventsPerProton :   2.547e-7  # 1.6261E-07 #  -10 # -8 # -1 
#------------------------------------------------------------------------------
# CRV mixing - not validated for SU2020, not used
#------------------------------------------------------------------------------
# Mixing.filters.ootMixerCRV.mu2e.meanEventsPerProton	    : 4.5379E-06
# Mixing.filters.neutronMixerCRV.mu2e.meanEventsPerProton  : 3.6173E-06
# Mixing.filters.dioMixerCRV.mu2e.meanEventsPerProton      : 3.2816E-07
# Mixing.filters.photonMixerCRV.mu2e.meanEventsPerProton   : 1.3449E-07
#  Mixing.filters.PSMixerCRV.mu2e.meanEventsPerProton        : 9.5035E-05     # uncut
# Mixing.filters.PSMixerCRV.mu2e.meanEventsPerProton	    : 4.2425E-05     # cut 
# Mixing.filters.TSMixerCRV.mu2e.meanEventsPerProton	    : 2.4368E-06
#  Mixing.filters.DSMixerCRV.mu2e.meanEventsPerProton        : 2.8126E-04     # uncut
# physics.filters.DSMixerCRV.mu2e.meanEventsPerProton	    : 1.4588E-06     # cut
